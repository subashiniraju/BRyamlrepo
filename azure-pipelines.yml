# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  name: Default
stages:
- stage: Build
  jobs:
    - job: Build_job
      pool:
       name: Default
      steps:
      - task: CopyFiles@2
        displayName: Copy Files
        inputs:
          Contents: '**'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
      - task: PublishBuildArtifacts@1
        displayName: Publish Artifact
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'
- stage: Deploy
  jobs:
    - job: Deploy_job
      pool:
       name: Default
      steps:
      - task: DownloadBuildArtifacts@1
        displayName: Download Artifact
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'drop'
          downloadPath: '$(System.ArtifactsDirectory)'
      - task: TerraformInstaller@0
        displayName: Terraform installer
        inputs:
          terraformVersion: 'latest'
      - task: TerraformTaskV3@3
        displayName: init
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: 'azure_connection'
          backendAzureRmResourceGroupName: 'sarg'
          backendAzureRmStorageAccountName: 'diskname955400e4355dfe23'
          backendAzureRmContainerName: 'container2'
          backendAzureRmKey: 'yml.tfstate'
      - task: TerraformTaskV3@3
        displayName: plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          environmentServiceNameAzureRM: 'azure_connection'
      - task: TerraformTaskV3@3
        displayName: Apply
        inputs:
          provider: 'azurerm'
          command: 'apply'
          environmentServiceNameAzureRM: 'azure_connection'
      
      
           
      
      



